generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  UUID_UA         String             @id @default(uuid())
  Name_UA         String
  Email_UA        String             @unique
  Password_UA     String
  Phone_UA        String?
  Address_UA      String?
  Birthplace_UA   String?
  Birthdate_UA    DateTime?
  Photo_UA        String?
  isOperator_UA   Boolean            @default(false)
  isAdmin_UA      Boolean            @default(false)
  isUser_UA       Boolean            @default(true)
  isActive_UA     Boolean            @default(true)
  LastLogin_UA    DateTime           @default(now())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  UserData        UserData[]
}

model UserData {
  UUID_UD         String            @id @default(uuid())
  UserAccount     UserAccount       @relation(fields: [UUID_UA], references: [UUID_UA])
  UUID_UA         String            @unique           
  Balance_UD      Float             @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Notification    Notification[]
  VoucherUser     VoucherUser[]
  TransactionData TransactionData[]
}

model ArticleData {
  UUID_AD         String            @id @default(uuid())
  Title_AD        String
  Description_AD  String            @db.Text
  Image_AD        String          
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model VoucherData {
  UUID_VD         String            @id @default(uuid())
  Title_VD        String
  Description_VD  String            @db.Text
  Value_VD        Float
  Quota_VD        Int
  Price_VD        Float
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  VoucherUser     VoucherUser[]
}

model VoucherUser {
  UUID_VU         String            @id @default(uuid())
  UserData        UserData          @relation(fields: [UUID_UD], references: [UUID_UD])
  UUID_UD         String            @unique
  VoucherData     VoucherData       @relation(fields: [UUID_VD], references: [UUID_VD])
  UUID_VD         String            @unique
  isUsed_VU       Boolean           @default(false)
  Code_VU         String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  TransactionData TransactionData[]
}

model TransactionData {
  UUID_TD         String            @id @default(uuid())
  UserData        UserData          @relation(fields: [UUID_UD], references: [UUID_UD])
  UUID_UD         String
  VoucherUser     VoucherUser       @relation(fields: [UUID_VU], references: [UUID_VU])
  UUID_VU         String
  Type_TD         String
  Amount_TD       Float
  Status_TD       String            @default("Pending")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Notification {
  UUID_NF         String            @id @default(uuid())
  UserData        UserData?          @relation(fields: [UUID_UD], references: [UUID_UD])
  UUID_UD         String?          
  Title_NF        String
  Description_NF  String            @db.Text
  Category_NG     String            @default("Public")
  Schedule_NF     DateTime
  isSent_NF       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}
